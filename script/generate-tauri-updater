#!/usr/bin/env node
// @ts-check

import { spawnSync } from 'child_process'

/** @typedef {('linux' | 'darwin' | 'windows')} TauriPlatform  */
/** @typedef {('x86_64' | 'aarch64')} TauriArch  */
/** @typedef {(`${TauriPlatform}-${TauriArch}`)} TauriUpdaterPlatformName */

const releaseData = JSON.parse(
  getProcessOutput('gh', [
    'release',
    'view',
    '--json',
    'assets,body,createdAt',
    process.argv[2],
  ]),
)

function findAsset(
  /** @type {string} */
  platform,
  /** @type {TauriArch} */
  arch,
) {
  return releaseData.assets.find((asset) => {
    return asset.name.includes(platform) && asset.name.includes(arch)
  })
}

console.log(findAsset('darwin', 'x86_64'))

const updaterData = {
  version: process.argv[2],
  notes: releaseData.body,
  pub_date: releaseData.createdAt,
  platforms: {
    'darwin-x86_64': {
      signature: 'Content of app.tar.gz.sig',
      url: 'https://github.com/username/reponame/releases/download/v1.0.0/app-x86_64.app.tar.gz',
    },
    'darwin-aarch64': {
      signature: 'Content of app.tar.gz.sig',
      url: 'https://github.com/username/reponame/releases/download/v1.0.0/app-aarch64.app.tar.gz',
    },
    'linux-x86_64': {
      signature: 'Content of app.AppImage.tar.gz.sig',
      url: 'https://github.com/username/reponame/releases/download/v1.0.0/app-amd64.AppImage.tar.gz',
    },
    'windows-x86_64': {
      signature:
        'Content of app-setup.nsis.sig or app.msi.sig, depending on the chosen format',
      url: 'https://github.com/username/reponame/releases/download/v1.0.0/app-x64-setup.nsis.zip',
    },
  },
}

console.log(updaterData)

function getProcessOutput(
  /** @type {string} */
  command,
  /** @type {string[]} */
  args,
) {
  const process = spawnSync(command, args)

  if (process.error) {
    throw process.error
  }

  return process.stdout.toString()
}
